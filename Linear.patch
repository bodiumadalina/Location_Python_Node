--- /usr/local/lib/python3.6/dist-packages/torch/nn/modules/linear.py
+++ /usr/local/lib/python3.6/dist-packages/torch/nn/modules/linear.py
@@ -32,11 +32,8 @@
         torch.Size([128, 30])
     """
     __constants__ = ['in_features', 'out_features']
-    in_features: int
-    out_features: int
-    weight: Tensor
 
-    def __init__(self, in_features: int, out_features: int, bias: bool = True) -> None:
+    def __init__(self, in_features, out_features, bias=True):
         super(Linear, self).__init__()
         self.in_features = in_features
         self.out_features = out_features
@@ -47,17 +44,17 @@
             self.register_parameter('bias', None)
         self.reset_parameters()
 
-    def reset_parameters(self) -> None:
+    def reset_parameters(self):
         init.kaiming_uniform_(self.weight, a=math.sqrt(5))
         if self.bias is not None:
             fan_in, _ = init._calculate_fan_in_and_fan_out(self.weight)
             bound = 1 / math.sqrt(fan_in)
             init.uniform_(self.bias, -bound, bound)
 
-    def forward(self, input: Tensor) -> Tensor:
+    def forward(self, input):
         return F.linear(input, self.weight, self.bias)
 
-    def extra_repr(self) -> str:
+    def extra_repr(self):
         return 'in_features={}, out_features={}, bias={}'.format(
             self.in_features, self.out_features, self.bias is not None
         )